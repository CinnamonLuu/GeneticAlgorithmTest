// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel LineIntersection
#pragma kernel CalculateObstacleIntersections
#pragma kernel CalculateDistanceManhattan
#pragma kernel CalculateDistanceEuclidean
#pragma kernel CalculateDistanceChevyshev
#pragma kernel CalculateFitness

struct Line
{
	float2 pointA;
	float2 pointB;
	
};

struct Obstacle
{
	Line lineA;
	Line lineB;
	Line lineC;
	Line lineD;
};

    /*-------------------------INTERSECTION----------------------------- */

int numMovements;

RWStructuredBuffer<Line> _obstacleBounds;
RWStructuredBuffer<Line> _path;
RWStructuredBuffer<int> _intersects;

RWStructuredBuffer<int> _firstCollisionIndex;
RWStructuredBuffer<float2> _lastAgentPositions;


    /*-------------------------OBSTACLES----------------------------- */

int numObstacles;

RWStructuredBuffer<Obstacle> _obstacles;
RWStructuredBuffer<int> _numObstaclesIntersectedWith;

    /*-------------------------FITNESS----------------------------- */
RWStructuredBuffer<float> _obstacleMultiplier;
RWStructuredBuffer<float> _fitness;

    /*-------------------------DISTANCES----------------------------- */
float2 _targetPoint;

RWStructuredBuffer<float> _distances;


bool IsPointsOnDifferentSides(float2 obsA, float2 obsB, float2 pathA, float2 pathB)
{
	bool isOnDifferentSides = false;
	
	//The direction of the line
	float2 lineDir = obsB - obsA;

	//The normal to a line is just flipping x and y and making y negative
	float2 lineNormal = float2(-lineDir.y, lineDir.x);
	
	//Now we need to take the dot product between the normal and the points on the other line
	float dot1 = dot(lineNormal, pathA - obsA);
	float dot2 = dot(lineNormal, pathB - obsA);

	//If you multiply them and get a negative value then obsA and obsB are on different sides of the line
	if (dot1 * dot2 < 0)
	{
		isOnDifferentSides = true;
	}

	return isOnDifferentSides;
}

bool AreLineSegmentsIntersectingDotProduct(Line obstacleLine, Line pathLine)
{
	bool isIntersecting = false;

	if (IsPointsOnDifferentSides(obstacleLine.pointA, obstacleLine.pointB, pathLine.pointA, pathLine.pointB)
		&& IsPointsOnDifferentSides(pathLine.pointA, pathLine.pointB, obstacleLine.pointA, obstacleLine.pointB))
	{
		isIntersecting = true;
	}

	return isIntersecting;
}

bool AreLinesIntersecting(float2 obsA, float2 obsB, float2 pathA, float2 pathB)
{	
	//To avoid floating point precision issues we can add a small value
	float epsilon = 0.00001;

	bool isIntersecting = false;

	float denominator = (pathB.y - pathA.y) * (obsB.x - obsA.x)
                                - (pathB.x - pathA.x) * (obsB.y - obsA.y);


            //Make sure the denominator is > 0, if so the lines are parallel
	if (denominator != 0)
	{
		float u_a = ((pathB.x - pathA.x) * (obsA.y - pathA.y) - (pathB.y - pathA.y) * (obsA.x - pathA.x)) / denominator;
		float u_b = ((obsB.x - obsA.x) * (obsA.y - pathA.y) - (obsB.y - obsA.y) * (obsA.x - pathA.x)) / denominator;

                //Is intersecting if u_a and u_b are between 0 and 1 or exactly 0 or 1
		if (u_a >= 0 + epsilon && u_a <= 1 - epsilon && u_b >= 0 + epsilon && u_b <= 1 - epsilon)
		{
			isIntersecting = true;

		}
	}

	return isIntersecting;
}

float2 CalculateIntersectionPosition(float2 obsA, float2 obsB, float2 pathA, float2 pathB)
{
	float denominator = (pathB.y - pathA.y) * (obsB.x - obsA.x)
                                - (pathB.x - pathA.x) * (obsB.y - obsA.y);

	float u_a = ((pathB.x - pathA.x) * (obsA.y - pathA.y) - (pathB.y - pathA.y) * (obsA.x - pathA.x)) / denominator;
	float u_b = ((obsB.x - obsA.x) * (obsA.y - pathA.y) - (obsB.y - obsA.y) * (obsA.x - pathA.x)) / denominator;

	return float2(obsA.x + u_a * (obsB.x - obsA.x),
					obsA.y + u_a * (obsB.y - obsA.y));
}

int CalculateNumOfObstaclesIntersectedWith(Line lastPosToTarget)
{
	int numObstaclesIntersected = 0;
	
	//Each obstacle always have 4 lines
	for (int i = 0; i < numObstacles; i++)
	{
		if (AreLinesIntersecting(_obstacles[i].lineA.pointA, _obstacles[i].lineA.pointB, lastPosToTarget.pointA, lastPosToTarget.pointB))
		{
			numObstaclesIntersected++;
		}
		else if (AreLinesIntersecting(_obstacles[i].lineB.pointA, _obstacles[i].lineB.pointB, lastPosToTarget.pointA, lastPosToTarget.pointB))
		{
			numObstaclesIntersected++;
		}
		else if (AreLinesIntersecting(_obstacles[i].lineC.pointA, _obstacles[i].lineC.pointB, lastPosToTarget.pointA, lastPosToTarget.pointB))
		{
			numObstaclesIntersected++;
		}
		else if (AreLinesIntersecting(_obstacles[i].lineD.pointA, _obstacles[i].lineD.pointB, lastPosToTarget.pointA, lastPosToTarget.pointB))
		{
			numObstaclesIntersected++;
		}
	}
	return numObstaclesIntersected;
}

[numthreads(8, 1, 1)]
void CalculateObstacleIntersections(uint3 id : SV_DispatchThreadID)
{
	Line segment;
	segment.pointA = _lastAgentPositions[id.x];
	segment.pointB = _targetPoint;
	
	_numObstaclesIntersectedWith[id.x] = CalculateNumOfObstaclesIntersectedWith(segment);
}

[numthreads(8, 1, 1)]
void CalculateFitness(uint3 id : SV_DispatchThreadID)
{
	_obstacleMultiplier[id.x] = 1 - (0.1 * _numObstaclesIntersectedWith[id.x]);
	
	_fitness[id.x] = 60 / _distances[id.x]
					* (_intersects[id.x] == 1 ? 0.65 : 1)
					* _obstacleMultiplier[id.x];
}

[numthreads(8, 1, 1)]
void CalculateDistanceManhattan(uint3 id : SV_DispatchThreadID)
{
	_distances[id.x] = abs(_lastAgentPositions[id.x].x - _targetPoint.x)
						* abs(_lastAgentPositions[id.x].y - _targetPoint.y);
}

[numthreads(8, 1, 1)]
void CalculateDistanceEuclidean(uint3 id : SV_DispatchThreadID)
{
	_distances[id.x] = distance(_lastAgentPositions[id.x], _targetPoint);
}

[numthreads(8, 8, 1)]
void CalculateDistanceChevyshev(uint3 id : SV_DispatchThreadID)
{
	_distances[id.x] = max(_lastAgentPositions[id.x].x - _targetPoint.x,
							_lastAgentPositions[id.x].y - _targetPoint.y);

}

[numthreads(8, 8, 8)]
void LineIntersection(uint3 id : SV_DispatchThreadID)
{
	int currentAgentMovementIndex = id.z * numMovements + id.y;
	
	bool intersects = AreLinesIntersecting(_obstacleBounds[id.x].pointA, _obstacleBounds[id.x].pointB,
							_path[currentAgentMovementIndex].pointA, _path[currentAgentMovementIndex].pointB);
	
	bool hasIntersected = _intersects[id.z] == 1 ? true : false;
	_intersects[id.z] = intersects || hasIntersected ? 1 : 0;
	
	bool improves = (_firstCollisionIndex[id.z] > id.y);
	
	_firstCollisionIndex[id.z] = intersects && improves ? id.y : _firstCollisionIndex[id.z];
	
	_lastAgentPositions[id.z] = intersects && improves
									? CalculateIntersectionPosition(_obstacleBounds[id.x].pointA, _obstacleBounds[id.x].pointB,
																	_path[currentAgentMovementIndex].pointA, _path[currentAgentMovementIndex].pointB) 
									: _lastAgentPositions[id.z];
	
}





