// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel LineIntersection
#pragma kernel CalculateObstacleIntersections
#pragma kernel CalculateDistanceManhattan
#pragma kernel CalculateDistanceEuclidean
#pragma kernel CalculateDistanceChevyshev
#pragma kernel CalculateFitness

struct Line
{
	float2 pointA;
	float2 pointB;

};

struct Obstacle
{
	Line lineA;
	Line lineB;
	Line lineC;
	Line lineD;
};

/*-------------------------INTERSECTION----------------------------- */

uint numMovements;
uint numAgents;

RWStructuredBuffer<Line> _obstacleBounds;
RWStructuredBuffer<Line> _path;
RWStructuredBuffer<int> _intersects;

RWStructuredBuffer<int> _firstCollisionIndex;
RWStructuredBuffer<float2> _lastAgentPositions;


/*-------------------------OBSTACLES----------------------------- */

int numObstacles;

RWStructuredBuffer<Obstacle> _obstacles;
RWStructuredBuffer<int> _numObstaclesIntersectedWith;

/*-------------------------FITNESS----------------------------- */
RWStructuredBuffer<float> _obstacleMultiplier;
RWStructuredBuffer<float> _fitness;

/*-------------------------DISTANCES----------------------------- */
float2 _targetPoint;

RWStructuredBuffer<float> _distances;


RWStructuredBuffer<float2> u;


float2 calculateU(float2 obsA, float2 obsB, float2 pathA, float2 pathB)
{
	//To avoid floating point precision issues we can add a small value
	float epsilon = 0.00001;

	bool isIntersecting = false;

	float a = (pathB.y - pathA.y),
		b = (obsB.x - obsA.x),
		c = (pathB.x - pathA.x),
		d = (obsB.y - obsA.y);

	float e = a * b,
		f = c * d,
		g = e - f;
	float denominator = g;

	/*float denominator = (pathB.y - pathA.y) * (obsB.x - obsA.x)
								- (pathB.x - pathA.x) * (obsB.y - obsA.y);*/
	float u_a, u_b;
	//Make sure the denominator is > 0, if so the lines are parallel
	if (denominator != 0)
	{
		u_a = ((pathB.x - pathA.x) * (obsA.y - pathA.y) - (pathB.y - pathA.y) * (obsA.x - pathA.x)) / denominator;
		u_b = ((obsB.x - obsA.x) * (obsA.y - pathA.y) - (obsB.y - obsA.y) * (obsA.x - pathA.x)) / denominator;

	}

	return float2(denominator, u_b);
}

bool AreLinesIntersecting(float2 obsA, float2 obsB, float2 pathA, float2 pathB)
{
	//To avoid floating point precision issues we can add a small value
	float epsilon = 0.00001;

	bool isIntersecting = false;

	float denominator = (pathB.y - pathA.y) * (obsB.x - obsA.x)
		- (pathB.x - pathA.x) * (obsB.y - obsA.y);

	//Make sure the denominator is > 0, if so the lines are parallel
	if (denominator != 0)
	{
		float u_a = ((pathB.x - pathA.x) * (obsA.y - pathA.y) - (pathB.y - pathA.y) * (obsA.x - pathA.x)) / denominator;
		float u_b = ((obsB.x - obsA.x) * (obsA.y - pathA.y) - (obsB.y - obsA.y) * (obsA.x - pathA.x)) / denominator;

		//Is intersecting if u_a and u_b are between 0 and 1 or exactly 0 or 1
		if (u_a >= 0 + epsilon && u_a <= 1 - epsilon && u_b >= 0 + epsilon && u_b <= 1 - epsilon)
		{
			isIntersecting = true;
		}
	}

	return isIntersecting;
}

float2 CalculateIntersectionPosition(float2 obsA, float2 obsB, float2 pathA, float2 pathB)
{
	float denominator = (pathB.y - pathA.y) * (obsB.x - obsA.x)
		- (pathB.x - pathA.x) * (obsB.y - obsA.y);

	float u_a = ((pathB.x - pathA.x) * (obsA.y - pathA.y) - (pathB.y - pathA.y) * (obsA.x - pathA.x)) / denominator;
	float u_b = ((obsB.x - obsA.x) * (obsA.y - pathA.y) - (obsB.y - obsA.y) * (obsA.x - pathA.x)) / denominator;

	return float2(obsA.x + u_a * (obsB.x - obsA.x),
		obsA.y + u_a * (obsB.y - obsA.y));
}

int CalculateNumOfObstaclesIntersectedWith(Line lastPosToTarget)
{
	int numObstaclesIntersected = 0;

	//Each obstacle always have 4 lines
	for (int i = 0; i < numObstacles; i++)
	{
		if (AreLinesIntersecting(_obstacles[i].lineA.pointA, _obstacles[i].lineA.pointB, lastPosToTarget.pointA, lastPosToTarget.pointB))
		{
			numObstaclesIntersected++;
		}
		else if (AreLinesIntersecting(_obstacles[i].lineB.pointA, _obstacles[i].lineB.pointB, lastPosToTarget.pointA, lastPosToTarget.pointB))
		{
			numObstaclesIntersected++;
		}
		else if (AreLinesIntersecting(_obstacles[i].lineC.pointA, _obstacles[i].lineC.pointB, lastPosToTarget.pointA, lastPosToTarget.pointB))
		{
			numObstaclesIntersected++;
		}
		else if (AreLinesIntersecting(_obstacles[i].lineD.pointA, _obstacles[i].lineD.pointB, lastPosToTarget.pointA, lastPosToTarget.pointB))
		{
			numObstaclesIntersected++;
		}
	}
	return numObstaclesIntersected;
}

[numthreads(8, 1, 1)]
void CalculateObstacleIntersections(uint3 id : SV_DispatchThreadID)
{
	Line segment;
	segment.pointA = _lastAgentPositions[id.x];
	segment.pointB = _targetPoint;

	_numObstaclesIntersectedWith[id.x] = CalculateNumOfObstaclesIntersectedWith(segment);
}

[numthreads(8, 1, 1)]
void CalculateFitness(uint3 id : SV_DispatchThreadID)
{
	_obstacleMultiplier[id.x] = 1 - (0.1 * _numObstaclesIntersectedWith[id.x]);

	_fitness[id.x] = 60 / _distances[id.x]
		* (_intersects[id.x] == 1 ? 0.65 : 1)
		* _obstacleMultiplier[id.x];
}

[numthreads(8, 1, 1)]
void CalculateDistanceManhattan(uint3 id : SV_DispatchThreadID)
{
	_distances[id.x] = abs(_lastAgentPositions[id.x].x - _targetPoint.x)
		* abs(_lastAgentPositions[id.x].y - _targetPoint.y);
}

[numthreads(8, 1, 1)]
void CalculateDistanceEuclidean(uint3 id : SV_DispatchThreadID)
{
	_distances[id.x] = distance(_lastAgentPositions[id.x], _targetPoint);
}

[numthreads(8, 8, 1)]
void CalculateDistanceChevyshev(uint3 id : SV_DispatchThreadID)
{
	_distances[id.x] = max(_lastAgentPositions[id.x].x - _targetPoint.x,
		_lastAgentPositions[id.x].y - _targetPoint.y);

}

[numthreads(8, 8, 8)]
void LineIntersection(uint3 id : SV_DispatchThreadID)
{
	if (id.y < numMovements && id.z < numAgents) {
		uint currentAgentMovementIndex = id.z * numMovements + id.y;
		int tempID = id.x * numMovements + id.y;

		u[tempID] = calculateU(_obstacleBounds[id.x].pointA,
			_obstacleBounds[id.x].pointB,
			_path[currentAgentMovementIndex].pointA,
			_path[currentAgentMovementIndex].pointB);

		bool intersects = AreLinesIntersecting(_obstacleBounds[id.x].pointA,
			_obstacleBounds[id.x].pointB,
			_path[currentAgentMovementIndex].pointA,
			_path[currentAgentMovementIndex].pointB);

		bool hasIntersected = _intersects[id.z] == 1 ? true : false;
		_intersects[id.z] = intersects || hasIntersected ? 1 : 0;

		bool improves = (_firstCollisionIndex[id.z] > id.y);

		_firstCollisionIndex[id.z] = intersects && improves ? id.y : _firstCollisionIndex[id.z];

		_lastAgentPositions[id.z] = intersects && improves
			? CalculateIntersectionPosition(_obstacleBounds[id.x].pointA, _obstacleBounds[id.x].pointB,
				_path[currentAgentMovementIndex].pointA, _path[currentAgentMovementIndex].pointB)
			: _lastAgentPositions[id.z];
	}
}





